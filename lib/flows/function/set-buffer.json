[
    {
        "id": "119216d5.708899",
        "type": "function",
        "z": "e4a9abd1.77e9a",
        "name": "setBuffer",
        "func": "try {\n    const debug = env.get(\"debug\");\n    if (!msg || msg === null || !msg.payload) throw new Error(\"No input to parse\");\n    const resourceId = env.get(\"resource_id\");\n    if (!resourceId) throw new Error(\"no resource id set\");\n    const value = msg.payload; \n    if (!value) throw new Error(\"no sensor value found\");\n    if (debug) {\n        console.log(`get-buffer for ${resourceId}`, typeof value);\n    }\n    if (typeof value === \"string\") {\n        if ( value === \"1\" ||  value === \"true\") return null;\n        else if (value === \"false\" || value === \"0\") {\n            msg.reset = true;\n            return msg;\n        }    \n        if (JSON.parse(value)) {\n            msg.payload = JSON.parse(value).data;\n        } else {\n            msg.payload = Buffer.from(value, 'utf-8').toJSON().data; \n        }   \n        //  msg.payload = Buffer.from(value, 'utf-8').toJSON(); \n    } else if (typeof value === \"object\" && value.type && value.data){\n        msg.payload = value.data;\n    } else if (Buffer.isBuffer(value)){\n        msg.payload = value;\n    }\n    const type = env.get(\"content_type\");\n    if (type && type !== null) {\n        msg.mimetype = type; \n    }\n    msg.payload = Buffer.from(msg.payload);\n    if (debug) {\n        console.log(`set-buffer for ${resourceId}`, Buffer.isBuffer(msg.payload));\n    }\n    return msg;\n} catch(error) {\n    return error;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 200,
        "wires": [
            []
        ]
    }
]
